{"ast":null,"code":"var _jsxFileName = \"/Users/shadownight/Documents/react-app/client/src/contexts/ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Создание контекста\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/createContext();\n\n// Хук для использования контекста темы\nexport const useTheme = () => {\n  _s();\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme должен использоваться внутри ThemeProvider');\n  }\n  return context;\n};\n\n// Провайдер контекста темы\n_s(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  const [theme, setTheme] = useState('light');\n\n  // Загрузка темы из localStorage при инициализации\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('uxui_lab_theme');\n    if (savedTheme && (savedTheme === 'light' || savedTheme === 'dark')) {\n      setTheme(savedTheme);\n    } else {\n      // Определение системной темы\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      setTheme(prefersDark ? 'dark' : 'light');\n    }\n  }, []);\n\n  // Сохранение темы в localStorage при изменении\n  useEffect(() => {\n    localStorage.setItem('uxui_lab_theme', theme);\n\n    // Обновление CSS-переменных для системных элементов\n    document.documentElement.setAttribute('data-theme', theme);\n  }, [theme]);\n\n  // Переключение темы\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n\n  // Установка конкретной темы\n  const setThemeMode = newTheme => {\n    if (newTheme === 'light' || newTheme === 'dark') {\n      setTheme(newTheme);\n    }\n  };\n\n  // Проверка, является ли текущая тема темной\n  const isDarkMode = theme === 'dark';\n\n  // Значение контекста\n  const value = {\n    theme,\n    isDarkMode,\n    toggleTheme,\n    setTheme: setThemeMode\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s2(ThemeProvider, \"l0NnHMBAjTNA2m05PT0LPL3eOKc=\");\n_c = ThemeProvider;\nexport default ThemeContext;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","useTheme","_s","context","Error","ThemeProvider","children","_s2","theme","setTheme","savedTheme","localStorage","getItem","prefersDark","window","matchMedia","matches","setItem","document","documentElement","setAttribute","toggleTheme","prevTheme","setThemeMode","newTheme","isDarkMode","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shadownight/Documents/react-app/client/src/contexts/ThemeContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Создание контекста\nexport const ThemeContext = createContext();\n\n// Хук для использования контекста темы\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme должен использоваться внутри ThemeProvider');\n  }\n  return context;\n};\n\n// Провайдер контекста темы\nexport const ThemeProvider = ({ children }) => {\n  const [theme, setTheme] = useState('light');\n\n  // Загрузка темы из localStorage при инициализации\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('uxui_lab_theme');\n    if (savedTheme && (savedTheme === 'light' || savedTheme === 'dark')) {\n      setTheme(savedTheme);\n    } else {\n      // Определение системной темы\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      setTheme(prefersDark ? 'dark' : 'light');\n    }\n  }, []);\n\n  // Сохранение темы в localStorage при изменении\n  useEffect(() => {\n    localStorage.setItem('uxui_lab_theme', theme);\n    \n    // Обновление CSS-переменных для системных элементов\n    document.documentElement.setAttribute('data-theme', theme);\n  }, [theme]);\n\n  // Переключение темы\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n\n  // Установка конкретной темы\n  const setThemeMode = (newTheme) => {\n    if (newTheme === 'light' || newTheme === 'dark') {\n      setTheme(newTheme);\n    }\n  };\n\n  // Проверка, является ли текущая тема темной\n  const isDarkMode = theme === 'dark';\n\n  // Значение контекста\n  const value = {\n    theme,\n    isDarkMode,\n    toggleTheme,\n    setTheme: setThemeMode,\n  };\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeContext; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,YAAY,gBAAGN,aAAa,CAAC,CAAC;;AAE3C;AACA,OAAO,MAAMO,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAMC,OAAO,GAAGR,UAAU,CAACK,YAAY,CAAC;EACxC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,qDAAqD,CAAC;EACxE;EACA,OAAOD,OAAO;AAChB,CAAC;;AAED;AAAAD,EAAA,CARaD,QAAQ;AASrB,OAAO,MAAMI,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC7C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,OAAO,CAAC;;EAE3C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMa,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC;IACzD,IAAIF,UAAU,KAAKA,UAAU,KAAK,OAAO,IAAIA,UAAU,KAAK,MAAM,CAAC,EAAE;MACnED,QAAQ,CAACC,UAAU,CAAC;IACtB,CAAC,MAAM;MACL;MACA,MAAMG,WAAW,GAAGC,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO;MAC7EP,QAAQ,CAACI,WAAW,GAAG,MAAM,GAAG,OAAO,CAAC;IAC1C;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAhB,SAAS,CAAC,MAAM;IACdc,YAAY,CAACM,OAAO,CAAC,gBAAgB,EAAET,KAAK,CAAC;;IAE7C;IACAU,QAAQ,CAACC,eAAe,CAACC,YAAY,CAAC,YAAY,EAAEZ,KAAK,CAAC;EAC5D,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;;EAEX;EACA,MAAMa,WAAW,GAAGA,CAAA,KAAM;IACxBZ,QAAQ,CAACa,SAAS,IAAIA,SAAS,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC;EACjE,CAAC;;EAED;EACA,MAAMC,YAAY,GAAIC,QAAQ,IAAK;IACjC,IAAIA,QAAQ,KAAK,OAAO,IAAIA,QAAQ,KAAK,MAAM,EAAE;MAC/Cf,QAAQ,CAACe,QAAQ,CAAC;IACpB;EACF,CAAC;;EAED;EACA,MAAMC,UAAU,GAAGjB,KAAK,KAAK,MAAM;;EAEnC;EACA,MAAMkB,KAAK,GAAG;IACZlB,KAAK;IACLiB,UAAU;IACVJ,WAAW;IACXZ,QAAQ,EAAEc;EACZ,CAAC;EAED,oBACExB,OAAA,CAACC,YAAY,CAAC2B,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAApB,QAAA,EACjCA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACxB,GAAA,CAnDWF,aAAa;AAAA2B,EAAA,GAAb3B,aAAa;AAqD1B,eAAeL,YAAY;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}