{"ast":null,"code":"var _jsxFileName = \"/Users/shadownight/Documents/react-app/client/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Создание контекста\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Хук для использования контекста аутентификации\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth должен использоваться внутри AuthProvider');\n  }\n  return context;\n};\n\n// Провайдер контекста аутентификации\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Проверка токена при загрузке приложения\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n  const checkAuthStatus = async () => {\n    try {\n      const token = localStorage.getItem('uxui_lab_token');\n      if (!token) {\n        setLoading(false);\n        return;\n      }\n\n      // Проверка валидности токена через API\n      const response = await fetch('/api/auth/me', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        const userData = await response.json();\n        setUser(userData.user);\n        setIsAuthenticated(true);\n      } else {\n        // Токен недействителен\n        localStorage.removeItem('uxui_lab_token');\n        setUser(null);\n        setIsAuthenticated(false);\n      }\n    } catch (error) {\n      console.error('Ошибка проверки аутентификации:', error);\n      localStorage.removeItem('uxui_lab_token');\n      setUser(null);\n      setIsAuthenticated(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Функция входа\n  const login = async credentials => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(credentials)\n      });\n      const data = await response.json();\n      if (response.ok) {\n        localStorage.setItem('uxui_lab_token', data.token);\n        setUser(data.user);\n        setIsAuthenticated(true);\n        return {\n          success: true,\n          data\n        };\n      } else {\n        setError(data.error || 'Ошибка входа');\n        return {\n          success: false,\n          error: data.error\n        };\n      }\n    } catch (error) {\n      const errorMessage = 'Ошибка соединения с сервером';\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Функция регистрации\n  const register = async userData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      const data = await response.json();\n      if (response.ok) {\n        localStorage.setItem('uxui_lab_token', data.token);\n        setUser(data.user);\n        setIsAuthenticated(true);\n        return {\n          success: true,\n          data\n        };\n      } else {\n        setError(data.error || 'Ошибка регистрации');\n        return {\n          success: false,\n          error: data.error\n        };\n      }\n    } catch (error) {\n      const errorMessage = 'Ошибка соединения с сервером';\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Функция выхода\n  const logout = async () => {\n    try {\n      const token = localStorage.getItem('uxui_lab_token');\n      if (token) {\n        // Уведомляем сервер о выходе\n        await fetch('/api/auth/logout', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Ошибка при выходе:', error);\n    } finally {\n      // Очищаем локальное состояние\n      localStorage.removeItem('uxui_lab_token');\n      setUser(null);\n      setIsAuthenticated(false);\n      setError(null);\n    }\n  };\n\n  // Обновление данных пользователя\n  const updateUser = async updateData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const token = localStorage.getItem('uxui_lab_token');\n      const response = await fetch('/api/users/me', {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(updateData)\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setUser(data.user);\n        return {\n          success: true,\n          data\n        };\n      } else {\n        setError(data.error || 'Ошибка обновления профиля');\n        return {\n          success: false,\n          error: data.error\n        };\n      }\n    } catch (error) {\n      const errorMessage = 'Ошибка соединения с сервером';\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Смена пароля\n  const changePassword = async passwordData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const token = localStorage.getItem('uxui_lab_token');\n      const response = await fetch('/api/auth/change-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(passwordData)\n      });\n      const data = await response.json();\n      if (response.ok) {\n        return {\n          success: true,\n          data\n        };\n      } else {\n        setError(data.error || 'Ошибка смены пароля');\n        return {\n          success: false,\n          error: data.error\n        };\n      }\n    } catch (error) {\n      const errorMessage = 'Ошибка соединения с сервером';\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Очистка ошибок\n  const clearError = () => {\n    setError(null);\n  };\n\n  // Значение контекста\n  const value = {\n    user,\n    loading,\n    isAuthenticated,\n    error,\n    login,\n    register,\n    logout,\n    updateUser,\n    changePassword,\n    clearError,\n    checkAuthStatus\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"DeefLtK9F0RcW2sJ6ueQQp2EgYo=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","isAuthenticated","setIsAuthenticated","error","setError","checkAuthStatus","token","localStorage","getItem","response","fetch","headers","ok","userData","json","removeItem","console","login","credentials","method","body","JSON","stringify","data","setItem","success","errorMessage","register","logout","updateUser","updateData","changePassword","passwordData","clearError","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shadownight/Documents/react-app/client/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Создание контекста\nconst AuthContext = createContext();\n\n// Хук для использования контекста аутентификации\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth должен использоваться внутри AuthProvider');\n  }\n  return context;\n};\n\n// Провайдер контекста аутентификации\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Проверка токена при загрузке приложения\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  const checkAuthStatus = async () => {\n    try {\n      const token = localStorage.getItem('uxui_lab_token');\n      if (!token) {\n        setLoading(false);\n        return;\n      }\n\n      // Проверка валидности токена через API\n      const response = await fetch('/api/auth/me', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (response.ok) {\n        const userData = await response.json();\n        setUser(userData.user);\n        setIsAuthenticated(true);\n      } else {\n        // Токен недействителен\n        localStorage.removeItem('uxui_lab_token');\n        setUser(null);\n        setIsAuthenticated(false);\n      }\n    } catch (error) {\n      console.error('Ошибка проверки аутентификации:', error);\n      localStorage.removeItem('uxui_lab_token');\n      setUser(null);\n      setIsAuthenticated(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Функция входа\n  const login = async (credentials) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(credentials),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        localStorage.setItem('uxui_lab_token', data.token);\n        setUser(data.user);\n        setIsAuthenticated(true);\n        return { success: true, data };\n      } else {\n        setError(data.error || 'Ошибка входа');\n        return { success: false, error: data.error };\n      }\n    } catch (error) {\n      const errorMessage = 'Ошибка соединения с сервером';\n      setError(errorMessage);\n      return { success: false, error: errorMessage };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Функция регистрации\n  const register = async (userData) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(userData),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        localStorage.setItem('uxui_lab_token', data.token);\n        setUser(data.user);\n        setIsAuthenticated(true);\n        return { success: true, data };\n      } else {\n        setError(data.error || 'Ошибка регистрации');\n        return { success: false, error: data.error };\n      }\n    } catch (error) {\n      const errorMessage = 'Ошибка соединения с сервером';\n      setError(errorMessage);\n      return { success: false, error: errorMessage };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Функция выхода\n  const logout = async () => {\n    try {\n      const token = localStorage.getItem('uxui_lab_token');\n      \n      if (token) {\n        // Уведомляем сервер о выходе\n        await fetch('/api/auth/logout', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${token}`,\n          },\n        });\n      }\n    } catch (error) {\n      console.error('Ошибка при выходе:', error);\n    } finally {\n      // Очищаем локальное состояние\n      localStorage.removeItem('uxui_lab_token');\n      setUser(null);\n      setIsAuthenticated(false);\n      setError(null);\n    }\n  };\n\n  // Обновление данных пользователя\n  const updateUser = async (updateData) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const token = localStorage.getItem('uxui_lab_token');\n      const response = await fetch('/api/users/me', {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify(updateData),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        setUser(data.user);\n        return { success: true, data };\n      } else {\n        setError(data.error || 'Ошибка обновления профиля');\n        return { success: false, error: data.error };\n      }\n    } catch (error) {\n      const errorMessage = 'Ошибка соединения с сервером';\n      setError(errorMessage);\n      return { success: false, error: errorMessage };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Смена пароля\n  const changePassword = async (passwordData) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const token = localStorage.getItem('uxui_lab_token');\n      const response = await fetch('/api/auth/change-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify(passwordData),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        return { success: true, data };\n      } else {\n        setError(data.error || 'Ошибка смены пароля');\n        return { success: false, error: data.error };\n      }\n    } catch (error) {\n      const errorMessage = 'Ошибка соединения с сервером';\n      setError(errorMessage);\n      return { success: false, error: errorMessage };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Очистка ошибок\n  const clearError = () => {\n    setError(null);\n  };\n\n  // Значение контекста\n  const value = {\n    user,\n    loading,\n    isAuthenticated,\n    error,\n    login,\n    register,\n    logout,\n    updateUser,\n    changePassword,\n    clearError,\n    checkAuthStatus,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}