#!/usr/bin/env node
import { exec } from 'child_process';
import { promisify } from 'util';
import fs from 'fs';
import path from 'path';
import dotenv from 'dotenv';
import readline from 'readline';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: 'config.env' });

const execAsync = promisify(exec);

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (prompt) => {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
};

const createDatabaseDumpInteractive = async () => {
  try {
    console.log('üì¶ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    console.log('='.repeat(50));
    console.log('');

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    const dbConfig = {
      host: process.env.POSTGRES_HOST || 'localhost',
      port: process.env.POSTGRES_PORT || 5432,
      database: process.env.POSTGRES_DB || 'uxui_lab',
      username: process.env.POSTGRES_USER || 'postgres',
      password: process.env.POSTGRES_PASSWORD || 'password'
    };

    console.log('üîß –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');
    console.log(`   –•–æ—Å—Ç: ${dbConfig.host}`);
    console.log(`   –ü–æ—Ä—Ç: ${dbConfig.port}`);
    console.log(`   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbConfig.database}`);
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${dbConfig.username}`);
    console.log('');

    // –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const changeParams = await question('üîß –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è? (y/n): ');
    
    if (changeParams.toLowerCase() === 'y' || changeParams.toLowerCase() === 'yes' || changeParams.toLowerCase() === '–¥–∞') {
      dbConfig.host = await question(`–•–æ—Å—Ç (${dbConfig.host}): `) || dbConfig.host;
      dbConfig.port = await question(`–ü–æ—Ä—Ç (${dbConfig.port}): `) || dbConfig.port;
      dbConfig.database = await question(`–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (${dbConfig.database}): `) || dbConfig.database;
      dbConfig.username = await question(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (${dbConfig.username}): `) || dbConfig.username;
      
      const changePassword = await question('–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å? (y/n): ');
      if (changePassword.toLowerCase() === 'y' || changePassword.toLowerCase() === 'yes' || changePassword.toLowerCase() === '–¥–∞') {
        dbConfig.password = await question('–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ');
      }
    }

    console.log('');
    console.log('üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–º–ø–∞:');
    console.log('   1. –ü–æ–ª–Ω—ã–π –¥–∞–º–ø (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ + –¥–∞–Ω–Ω—ã–µ)');
    console.log('   2. –¢–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (—Å—Ö–µ–º–∞ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö)');
    console.log('   3. –¢–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ (–±–µ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)');
    console.log('   4. –°–æ–∑–¥–∞—Ç—å –≤—Å–µ —Ç–∏–ø—ã –¥–∞–º–ø–æ–≤');
    
    const dumpType = await question('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-4): ');

    console.log('');
    console.log('üìÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–º–ø–∞:');
    console.log('   1. SQL —Ç–µ–∫—Å—Ç (.sql)');
    console.log('   2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞—Ä—Ö–∏–≤ (.dump) - –±–∏–Ω–∞—Ä–Ω—ã–π');
    console.log('   3. Tar –∞—Ä—Ö–∏–≤ (.tar)');
    
    const formatType = await question('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç (1-3): ');

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–º–ø–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const dumpsDir = path.join(process.cwd(), 'database_dumps');
    if (!fs.existsSync(dumpsDir)) {
      fs.mkdirSync(dumpsDir, { recursive: true });
      console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –¥–∞–º–ø–æ–≤: ${dumpsDir}`);
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    const timestamp = new Date().toISOString()
      .replace(/[:.]/g, '-')
      .replace('T', '_')
      .split('.')[0];

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ —Ñ–æ—Ä–º–∞—Ç
    let extension, formatFlag;
    switch (formatType) {
      case '2':
        extension = 'dump';
        formatFlag = '-Fc';
        break;
      case '3':
        extension = 'tar';
        formatFlag = '-Ft';
        break;
      default:
        extension = 'sql';
        formatFlag = '';
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const env = { ...process.env, PGPASSWORD: dbConfig.password };

    console.log('');
    console.log('‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞...');

    const createdFiles = [];

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–º–ø–∞
    const createDump = async (type, suffix, additionalFlags = '') => {
      const fileName = `${dbConfig.database}_${suffix}_${timestamp}.${extension}`;
      const filePath = path.join(dumpsDir, fileName);

      const command = `pg_dump -h ${dbConfig.host} -p ${dbConfig.port} -U ${dbConfig.username} -d ${dbConfig.database} --no-password ${formatFlag} ${additionalFlags} -f "${filePath}" --verbose --clean --if-exists`;

      try {
        await execAsync(command, { env });
        console.log(`‚úÖ ${type} —Å–æ–∑–¥–∞–Ω: ${fileName}`);
        
        const stats = fs.statSync(filePath);
        const size = formatFlag ? (stats.size / 1024 / 1024).toFixed(2) + ' MB' : (stats.size / 1024).toFixed(2) + ' KB';
        
        createdFiles.push({
          name: fileName,
          path: filePath,
          type: type,
          size: size
        });
        
        return true;
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ${type.toLowerCase()}: ${error.message}`);
        return false;
      }
    };

    // –°–æ–∑–¥–∞–µ–º –¥–∞–º–ø—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
    switch (dumpType) {
      case '1':
        await createDump('–ü–æ–ª–Ω—ã–π –¥–∞–º–ø', 'full', '--create');
        break;
      case '2':
        await createDump('–î–∞–º–ø —Å—Ç—Ä—É–∫—Ç—É—Ä—ã', 'schema', '--schema-only --create');
        break;
      case '3':
        await createDump('–î–∞–º–ø –¥–∞–Ω–Ω—ã—Ö', 'data', '--data-only');
        break;
      case '4':
        await createDump('–ü–æ–ª–Ω—ã–π –¥–∞–º–ø', 'full', '--create');
        await createDump('–î–∞–º–ø —Å—Ç—Ä—É–∫—Ç—É—Ä—ã', 'schema', '--schema-only --create');
        await createDump('–î–∞–º–ø –¥–∞–Ω–Ω—ã—Ö', 'data', '--data-only');
        break;
      default:
        console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –°–æ–∑–¥–∞–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –¥–∞–º–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.');
        await createDump('–ü–æ–ª–Ω—ã–π –¥–∞–º–ø', 'full', '--create');
    }

    console.log('');
    console.log('üéâ –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–º–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log('='.repeat(50));
    
    if (createdFiles.length > 0) {
      console.log('üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:');
      createdFiles.forEach((file, index) => {
        console.log(`   ${index + 1}. ${file.type}`);
        console.log(`      –§–∞–π–ª: ${file.name}`);
        console.log(`      –†–∞–∑–º–µ—Ä: ${file.size}`);
        console.log(`      –ü—É—Ç—å: ${file.path}`);
        console.log('');
      });

      console.log('üìñ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:');
      createdFiles.forEach((file) => {
        if (file.name.includes('.sql')) {
          console.log(`   ${file.type}: psql -h ${dbConfig.host} -p ${dbConfig.port} -U ${dbConfig.username} -d ${dbConfig.database} -f "${file.path}"`);
        } else {
          console.log(`   ${file.type}: pg_restore -h ${dbConfig.host} -p ${dbConfig.port} -U ${dbConfig.username} -d ${dbConfig.database} "${file.path}"`);
        }
      });
    }

    console.log('');
    console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('   ‚Ä¢ –•—Ä–∞–Ω–∏—Ç–µ –¥–∞–º–ø—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ');
    console.log('   ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏');
    console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–º–ø–æ–≤');
    console.log('   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∂–∞—Ç–∏–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–º–ø–∞:', error.message);
    console.log('');
    console.log('üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏:');
    console.log('   ‚Ä¢ pg_dump –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log('   ‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î');
    console.log('   ‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î');
    console.log('   ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
  } finally {
    rl.close();
    process.exit(0);
  }
};

// –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–º–ø–∞
createDatabaseDumpInteractive(); 