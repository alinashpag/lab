import sql from './database/connection.js';

const createTestData = async () => {
  try {
    console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await sql`
      INSERT INTO users (username, email, password_hash, first_name, last_name, role)
      VALUES ('testuser', 'test@example.com', '$2a$10$dummy.hash.for.test', '–¢–µ—Å—Ç', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'user')
      ON CONFLICT (email) DO UPDATE SET 
        first_name = EXCLUDED.first_name,
        last_name = EXCLUDED.last_name
      RETURNING id
    `;

    const userId = testUser[0].id;
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: ${userId}`);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
    const projects = [
      {
        name: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏',
        description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π e-commerce —Å–∞–π—Ç —Å –±–æ–ª—å—à–∏–º –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤',
        website_url: 'https://example-electronics.com',
        project_type: 'website'
      },
      {
        name: '–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–∞–Ω–∫–∞',
        description: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫–∏–Ω–≥–∞ —Å –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π',
        project_type: 'mobile'
      },
      {
        name: 'Figma –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º–∞',
        description: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã',
        figma_url: 'https://figma.com/design-system',
        project_type: 'figma'
      }
    ];

    for (const project of projects) {
      const createdProject = await sql`
        INSERT INTO projects (user_id, name, description, website_url, figma_url, project_type, status)
        VALUES (${userId}, ${project.name}, ${project.description}, ${project.website_url || null}, ${project.figma_url || null}, ${project.project_type}, 'active')
        ON CONFLICT (user_id, name) DO UPDATE SET 
          description = EXCLUDED.description,
          website_url = EXCLUDED.website_url,
          figma_url = EXCLUDED.figma_url,
          project_type = EXCLUDED.project_type
        RETURNING id
      `;

      const projectId = createdProject[0].id;
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç: "${project.name}" —Å ID: ${projectId}`);

      // –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
      const analyses = [
        {
          name: '–ê—É–¥–∏—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏',
          analysis_type: 'accessibility',
          status: 'completed',
          score: Math.floor(Math.random() * 30) + 70
        },
        {
          name: '–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
          analysis_type: 'performance',
          status: 'completed',
          score: Math.floor(Math.random() * 25) + 65
        },
        {
          name: 'UX/UI –∞–Ω–∞–ª–∏–∑',
          analysis_type: 'complete',
          status: 'running',
          score: null
        }
      ];

      for (const analysis of analyses) {
        const createdAnalysis = await sql`
          INSERT INTO analyses (project_id, name, analysis_type, status, score, started_at, completed_at)
          VALUES (
            ${projectId}, 
            ${analysis.name}, 
            ${analysis.analysis_type}, 
            ${analysis.status},
            ${analysis.score},
            ${analysis.status !== 'pending' ? new Date(Date.now() - Math.random() * 86400000) : null},
            ${analysis.status === 'completed' ? new Date() : null}
          )
          ON CONFLICT DO NOTHING
          RETURNING id
        `;

        if (createdAnalysis.length > 0) {
          console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω –∞–Ω–∞–ª–∏–∑: "${analysis.name}"`);
        }
      }

      // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
      const reports = [
        {
          name: `–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ UX/UI - ${project.name}`,
          report_type: 'comprehensive',
          status: 'ready',
          file_size: Math.floor(Math.random() * 2000000) + 500000 // 0.5-2.5MB
        },
        {
          name: `–û—Ç—á–µ—Ç –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ - ${project.name}`,
          report_type: 'accessibility',
          status: 'ready',
          file_size: Math.floor(Math.random() * 1000000) + 300000 // 0.3-1.3MB
        }
      ];

      for (const report of reports) {
        const createdReport = await sql`
          INSERT INTO reports (project_id, name, report_type, status, file_size, download_count)
          VALUES (
            ${projectId}, 
            ${report.name}, 
            ${report.report_type}, 
            ${report.status},
            ${report.file_size},
            ${Math.floor(Math.random() * 10)}
          )
          ON CONFLICT DO NOTHING
          RETURNING id
        `;

        if (createdReport.length > 0) {
          console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç: "${report.name}"`);
        }
      }
    }

    // –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const additionalUsers = [
      {
        username: 'designer',
        email: 'designer@company.com',
        first_name: '–ê–Ω–Ω–∞',
        last_name: '–î–∏–∑–∞–π–Ω–µ—Ä',
        role: 'user'
      },
      {
        username: 'developer',
        email: 'dev@company.com',
        first_name: '–ú–∞–∫—Å–∏–º',
        last_name: '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
        role: 'user'
      },
      {
        username: 'manager',
        email: 'pm@company.com',
        first_name: '–ï–ª–µ–Ω–∞',
        last_name: '–ú–µ–Ω–µ–¥–∂–µ—Ä',
        role: 'moderator'
      }
    ];

    for (const user of additionalUsers) {
      await sql`
        INSERT INTO users (username, email, password_hash, first_name, last_name, role)
        VALUES (${user.username}, ${user.email}, '$2a$10$dummy.hash.for.test', ${user.first_name}, ${user.last_name}, ${user.role})
        ON CONFLICT (email) DO UPDATE SET 
          first_name = EXCLUDED.first_name,
          last_name = EXCLUDED.last_name,
          role = EXCLUDED.role
      `;
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.first_name} ${user.last_name}`);
    }

    console.log('üéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
    console.log('üìä –¢–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    process.exit(0);
  }
};

createTestData(); 