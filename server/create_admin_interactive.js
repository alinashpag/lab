#!/usr/bin/env node
import bcrypt from 'bcryptjs';
import sql from './database/connection.js';
import readline from 'readline';

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (prompt) => {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
};

const createAdminInteractive = async () => {
  try {
    console.log('üîê –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ UX/UI Lab');
    console.log('='.repeat(50));
    console.log('');

    // –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const username = await question('üë§ –í–≤–µ–¥–∏—Ç–µ username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: admin): ') || 'admin';
    
    let email;
    while (!email) {
      const inputEmail = await question('üìß –í–≤–µ–¥–∏—Ç–µ email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ');
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (emailRegex.test(inputEmail)) {
        email = inputEmail;
      } else {
        console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
    }

    let password;
    while (!password) {
      const inputPassword = await question('üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤): ');
      if (inputPassword.length >= 6) {
        password = inputPassword;
      } else {
        console.log('‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
    }

    const firstName = await question('üè∑Ô∏è  –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä): ') || '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';

    console.log('');
    console.log('üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
    console.log(`   Username: ${username}`);
    console.log(`   Email: ${email}`);
    console.log(`   –ü–∞—Ä–æ–ª—å: ${'*'.repeat(password.length)}`);
    console.log(`   –ò–º—è: ${firstName}`);
    console.log('');

    const confirm = await question('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (y/n): ');
    
    if (confirm.toLowerCase() !== 'y' && confirm.toLowerCase() !== 'yes' && confirm.toLowerCase() !== '–¥–∞') {
      console.log('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
      return;
    }

    console.log('');
    console.log('‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');

    // –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    const hashedPassword = await bcrypt.hash(password, 12);

    // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤–æ–π —Å—Ö–µ–º–æ–π –ë–î
    let admin;
    try {
      admin = await sql`
        INSERT INTO users (username, email, password_hash, first_name, role, email_verified, created_at, updated_at)
        VALUES (${username}, ${email}, ${hashedPassword}, ${firstName}, 'admin', true, NOW(), NOW())
        ON CONFLICT (email) DO UPDATE SET
          first_name = EXCLUDED.first_name,
          role = 'admin',
          password_hash = EXCLUDED.password_hash,
          updated_at = NOW()
        RETURNING id, username, email, first_name, role, created_at
      `;
    } catch (error) {
      // Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º—ã –ë–î
      console.log('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ä–∞—è —Å—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      admin = await sql`
        INSERT INTO users (username, email, password, name, role, email_verified, created_at, updated_at)
        VALUES (${username}, ${email}, ${hashedPassword}, ${firstName}, 'admin', true, NOW(), NOW())
        ON CONFLICT (email) DO UPDATE SET
          name = EXCLUDED.name,
          role = 'admin',
          password = EXCLUDED.password,
          updated_at = NOW()
        RETURNING id, username, email, name, role, created_at
      `;
    }

    console.log('');
    console.log('üéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
    console.log('='.repeat(50));
    console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ:');
    console.log(`   ID: ${admin[0].id}`);
    console.log(`   Username: ${admin[0].username}`);
    console.log(`   Email: ${admin[0].email}`);
    console.log(`   –ò–º—è: ${admin[0].first_name || admin[0].name}`);
    console.log(`   –†–æ–ª—å: ${admin[0].role}`);
    console.log(`   –°–æ–∑–¥–∞–Ω: ${admin[0].created_at}`);
    console.log('');
    console.log('üîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:');
    console.log(`   Email: ${email}`);
    console.log(`   –ü–∞—Ä–æ–ª—å: ${password}`);
    console.log('');
    console.log('‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:');
    console.log('   ‚Ä¢ –°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞');
    console.log('   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é');
    console.log('   ‚Ä¢ –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–∞ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º');
    console.log('');
    console.log('üåê –ê–¥—Ä–µ—Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: http://localhost:3000/admin');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error.message);
    console.log('');
    console.log('üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏:');
    console.log('   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    console.log('   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    console.log('   ‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î');
  } finally {
    rl.close();
    process.exit(0);
  }
};

// –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
createAdminInteractive(); 