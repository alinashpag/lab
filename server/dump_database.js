#!/usr/bin/env node
import { exec } from 'child_process';
import { promisify } from 'util';
import fs from 'fs';
import path from 'path';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: 'config.env' });

const execAsync = promisify(exec);

const createDatabaseDump = async () => {
  try {
    console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    console.log('='.repeat(50));

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    const dbConfig = {
      host: process.env.POSTGRES_HOST || 'localhost',
      port: process.env.POSTGRES_PORT || 5432,
      database: process.env.POSTGRES_DB || 'uxui_lab',
      username: process.env.POSTGRES_USER || 'postgres',
      password: process.env.POSTGRES_PASSWORD || 'password'
    };

    console.log('üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');
    console.log(`   –•–æ—Å—Ç: ${dbConfig.host}`);
    console.log(`   –ü–æ—Ä—Ç: ${dbConfig.port}`);
    console.log(`   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbConfig.database}`);
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${dbConfig.username}`);
    console.log('');

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–º–ø–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const dumpsDir = path.join(process.cwd(), 'database_dumps');
    if (!fs.existsSync(dumpsDir)) {
      fs.mkdirSync(dumpsDir, { recursive: true });
      console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –¥–∞–º–ø–æ–≤: ${dumpsDir}`);
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    const timestamp = new Date().toISOString()
      .replace(/[:.]/g, '-')
      .replace('T', '_')
      .split('.')[0];
    
    const dumpFileName = `${dbConfig.database}_dump_${timestamp}.sql`;
    const dumpFilePath = path.join(dumpsDir, dumpFileName);

    // –°–æ–∑–¥–∞–µ–º –¥–∞–º–ø —Å –¥–∞–Ω–Ω—ã–º–∏
    console.log('‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ —Å –¥–∞–Ω–Ω—ã–º–∏...');
    const pgDumpCommand = `pg_dump -h ${dbConfig.host} -p ${dbConfig.port} -U ${dbConfig.username} -d ${dbConfig.database} --no-password -f "${dumpFilePath}" --verbose --clean --if-exists --create`;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const env = { ...process.env, PGPASSWORD: dbConfig.password };

    try {
      const { stdout, stderr } = await execAsync(pgDumpCommand, { env });
      
      if (stderr && !stderr.includes('NOTICE')) {
        console.log('‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:', stderr);
      }
      
      console.log('‚úÖ –î–∞–º–ø —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–º–ø–∞: ${error.message}`);
    }

    // –°–æ–∑–¥–∞–µ–º –¥–∞–º–ø —Ç–æ–ª—å–∫–æ —Å—Ö–µ–º—ã (–±–µ–∑ –¥–∞–Ω–Ω—ã—Ö)
    const schemaDumpFileName = `${dbConfig.database}_schema_${timestamp}.sql`;
    const schemaDumpFilePath = path.join(dumpsDir, schemaDumpFileName);

    console.log('‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ —Å—Ö–µ–º—ã (–±–µ–∑ –¥–∞–Ω–Ω—ã—Ö)...');
    const pgDumpSchemaCommand = `pg_dump -h ${dbConfig.host} -p ${dbConfig.port} -U ${dbConfig.username} -d ${dbConfig.database} --no-password -f "${schemaDumpFilePath}" --schema-only --verbose --clean --if-exists --create`;

    try {
      await execAsync(pgDumpSchemaCommand, { env });
      console.log('‚úÖ –î–∞–º–ø —Å—Ö–µ–º—ã —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    } catch (error) {
      console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–º–ø —Å—Ö–µ–º—ã:', error.message);
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
    const fullDumpStats = fs.statSync(dumpFilePath);
    const fullDumpSize = (fullDumpStats.size / 1024 / 1024).toFixed(2);

    console.log('');
    console.log('üéâ –î–∞–º–ø—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã!');
    console.log('='.repeat(50));
    console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–º–ø–∞—Ö:');
    console.log(`   –ü–æ–ª–Ω—ã–π –¥–∞–º–ø: ${dumpFileName}`);
    console.log(`   –†–∞–∑–º–µ—Ä: ${fullDumpSize} MB`);
    console.log(`   –ü—É—Ç—å: ${dumpFilePath}`);

    if (fs.existsSync(schemaDumpFilePath)) {
      const schemaStats = fs.statSync(schemaDumpFilePath);
      const schemaSize = (schemaStats.size / 1024).toFixed(2);
      console.log(`   –î–∞–º–ø —Å—Ö–µ–º—ã: ${schemaDumpFileName}`);
      console.log(`   –†–∞–∑–º–µ—Ä —Å—Ö–µ–º—ã: ${schemaSize} KB`);
      console.log(`   –ü—É—Ç—å —Å—Ö–µ–º—ã: ${schemaDumpFilePath}`);
    }

    console.log('');
    console.log('üìñ –ö–∞–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–º–ø:');
    console.log(`   psql -h ${dbConfig.host} -p ${dbConfig.port} -U ${dbConfig.username} -d ${dbConfig.database} -f "${dumpFilePath}"`);
    console.log('');
    console.log('üí° –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:');
    console.log('   ‚Ä¢ –î–∞–º–ø —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–∞–Ω–¥—ã DROP –∏ CREATE –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –ë–î');
    console.log('   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–º–ø —Å—Ö–µ–º—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö');
    console.log('   ‚Ä¢ –•—Ä–∞–Ω–∏—Ç–µ –¥–∞–º–ø—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–º–ø–∞:', error.message);
    console.log('');
    console.log('üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏:');
    console.log('   ‚Ä¢ pg_dump –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log('   ‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î');
    console.log('   ‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î');
    console.log('   ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    console.log('');
    console.log('üìö –£—Å—Ç–∞–Ω–æ–≤–∫–∞ pg_dump:');
    console.log('   macOS: brew install postgresql');
    console.log('   Ubuntu: sudo apt-get install postgresql-client');
    console.log('   Windows: –°–∫–∞—á–∞–π—Ç–µ PostgreSQL —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞');
  } finally {
    process.exit(0);
  }
};

// –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–º–ø–∞
createDatabaseDump(); 