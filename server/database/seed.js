import bcrypt from 'bcryptjs';
import sql from './connection.js';

const seedDatabase = async () => {
  try {
    console.log('üå± –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const hashedPassword = await bcrypt.hash('password123', 12);
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤–æ–π —Å—Ö–µ–º–æ–π, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é
    let user;
    try {
      user = await sql`
        INSERT INTO users (username, email, password_hash, first_name, role, email_verified)
        VALUES ('admin', 'admin@uxuilab.com', ${hashedPassword}, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 'admin', true)
        ON CONFLICT (email) DO UPDATE SET
          first_name = EXCLUDED.first_name,
          role = EXCLUDED.role,
          password_hash = EXCLUDED.password_hash
        RETURNING id, username, email, first_name, role
      `;
    } catch (error) {
      console.log('–ü—Ä–æ–±—É–µ–º —Å–æ —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      user = await sql`
        INSERT INTO users (username, email, password, name, role, email_verified)
        VALUES ('admin', 'admin@uxuilab.com', ${hashedPassword}, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 'admin', true)
        ON CONFLICT (email) DO UPDATE SET
          name = EXCLUDED.name,
          role = EXCLUDED.role,
          password = EXCLUDED.password
        RETURNING id, username, email, name, role
      `;
    }
    
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user[0]);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    const projects = [
      {
        name: 'E-commerce Dashboard',
        description: '–ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞',
        project_type: 'website',
        website_url: 'https://example-shop.com/admin',
        status: 'active'
      },
      {
        name: 'Mobile Banking App',
        description: 'UX –∞–Ω–∞–ª–∏–∑ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–∞–Ω–∫–∞',
        project_type: 'figma',
        figma_url: 'https://figma.com/file/xyz',
        status: 'active'
      },
      {
        name: 'Landing Page Design',
        description: '–ê–Ω–∞–ª–∏–∑ –ø–æ—Å–∞–¥–æ—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ç–∞',
        project_type: 'website',
        website_url: 'https://example-landing.com',
        status: 'active'
      }
    ];

    for (const project of projects) {
      const createdProject = await sql`
        INSERT INTO projects (user_id, name, description, project_type, website_url, figma_url, status)
        VALUES (${user[0].id}, ${project.name}, ${project.description}, ${project.project_type}, 
                ${project.website_url || null}, ${project.figma_url || null}, ${project.status})
        RETURNING id, name
      `;
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç:', createdProject[0]);

      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
      const analysisTypes = ['accessibility', 'usability', 'performance'];
      const randomType = analysisTypes[Math.floor(Math.random() * analysisTypes.length)];
      
      const analysis = await sql`
        INSERT INTO analyses (project_id, analysis_type, status, score, issues_found, 
                             results, completed_at)
        VALUES (${createdProject[0].id}, ${randomType}, 'completed', 
                ${Math.floor(Math.random() * 41) + 60}, ${Math.floor(Math.random() * 20) + 1},
                '{"summary": "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω", "recommendations": ["–£–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å", "–î–æ–±–∞–≤–∏—Ç—å alt-—Ç–µ–≥–∏"]}',
                NOW() - INTERVAL '1 hour')
        RETURNING id, analysis_type, score
      `;
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω –∞–Ω–∞–ª–∏–∑:', analysis[0]);

      // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const report = await sql`
        INSERT INTO reports (project_id, analysis_id, report_type, filename, 
                           file_path, status, expires_at)
        VALUES (${createdProject[0].id}, ${analysis[0].id}, 'pdf', 
                ${`report_${createdProject[0].id}_${Date.now()}.pdf`},
                ${`/reports/report_${createdProject[0].id}_${Date.now()}.pdf`},
                'ready', NOW() + INTERVAL '30 days')
        RETURNING id, filename
      `;
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç:', report[0]);
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const regularUserPassword = await bcrypt.hash('password123', 12);
    let regularUser;
    try {
      regularUser = await sql`
        INSERT INTO users (username, email, password_hash, first_name, role, email_verified)
        VALUES ('demo', 'demo@uxuilab.com', ${regularUserPassword}, '–î–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'user', true)
        ON CONFLICT (email) DO UPDATE SET
          first_name = EXCLUDED.first_name
        RETURNING id, username, email, first_name, role
      `;
    } catch (error) {
      regularUser = await sql`
        INSERT INTO users (username, email, password, name, role, email_verified)
        VALUES ('demo', 'demo@uxuilab.com', ${regularUserPassword}, '–î–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'user', true)
        ON CONFLICT (email) DO UPDATE SET
          name = EXCLUDED.name
        RETURNING id, username, email, name, role
      `;
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUserPassword = await bcrypt.hash('password123', 12);
    let testUser;
    try {
      testUser = await sql`
        INSERT INTO users (username, email, password_hash, first_name, role, email_verified)
        VALUES ('test', 'test@example.com', ${testUserPassword}, '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'user', true)
        ON CONFLICT (email) DO UPDATE SET
          first_name = EXCLUDED.first_name
        RETURNING id, username, email, first_name, role
      `;
    } catch (error) {
      testUser = await sql`
        INSERT INTO users (username, email, password, name, role, email_verified)
        VALUES ('test', 'test@example.com', ${testUserPassword}, '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'user', true)
        ON CONFLICT (email) DO UPDATE SET
          name = EXCLUDED.name
        RETURNING id, username, email, name, role
      `;
    }
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', regularUser[0]);
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', testUser[0]);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const notifications = [
      {
        user_id: user[0].id,
        type: 'analysis_completed',
        title: '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω',
        message: '–ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "E-commerce Dashboard" —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.',
        data: { project_id: 1, analysis_id: 1, score: 85 }
      },
      {
        user_id: user[0].id,
        type: 'report_ready',
        title: '–û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤',
        message: '–û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É "Mobile Banking App" –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é.',
        data: { project_id: 2, report_id: 1 }
      },
      {
        user_id: user[0].id,
        type: 'system_update',
        title: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã',
        message: '–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–æ–≤—ã—Ö —Å—Ö–µ–º –∏ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏.',
        data: { version: '1.2.0' }
      },
      {
        user_id: regularUser[0].id,
        type: 'welcome',
        title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
        message: '–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ UX/UI Lab. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.',
        data: {}
      },
      {
        user_id: regularUser[0].id,
        type: 'tip',
        title: '–°–æ–≤–µ—Ç –¥–Ω—è',
        message: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –≤–∞—à –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ–ª–µ–µ –∏–Ω–∫–ª—é–∑–∏–≤–Ω—ã–º.',
        data: { category: 'accessibility' }
      },
      {
        user_id: testUser[0].id,
        type: 'analysis_started',
        title: '–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω',
        message: '–ù–∞—á–∞—Ç –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "Landing Page Design".',
        data: { project_id: 3, analysis_type: 'performance' }
      },
      {
        user_id: testUser[0].id,
        type: 'quota_warning',
        title: '–õ–∏–º–∏—Ç –∞–Ω–∞–ª–∏–∑–æ–≤',
        message: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ 8 –∏–∑ 10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.',
        data: { used: 8, total: 10 }
      }
    ];

    for (const notification of notifications) {
      const createdNotification = await sql`
        INSERT INTO notifications (user_id, type, title, message, data, is_read)
        VALUES (${notification.user_id}, ${notification.type}, ${notification.title}, 
                ${notification.message}, ${JSON.stringify(notification.data)}, 
                ${Math.random() > 0.5})
        RETURNING id, title, type
      `;
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', createdNotification[0]);
    }

    console.log('üéâ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('');
    console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin@uxuilab.com / password123');
    console.log('–î–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: demo@uxuilab.com / password123');
    console.log('–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: test@example.com / password123');
    console.log('');

    return true;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    return false;
  }
};

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  seedDatabase()
    .then((success) => {
      if (success) {
        console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!');
        process.exit(0);
      } else {
        process.exit(1);
      }
    })
    .catch((error) => {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

export default seedDatabase; 