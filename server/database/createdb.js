import postgres from 'postgres';
import dotenv from 'dotenv';

dotenv.config({ path: 'config.env' });

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const sql = postgres({
  host: process.env.POSTGRES_HOST || 'localhost',
  port: process.env.POSTGRES_PORT || 5432,
  database: 'postgres', // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  username: process.env.POSTGRES_USER || 'postgres',
  password: process.env.POSTGRES_PASSWORD || 'password',
  max: 1,
  idle_timeout: 20,
  connect_timeout: 30,
});

const createDatabase = async () => {
  try {
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    const dbName = process.env.POSTGRES_DB || 'uxui_lab';
    
    const existingDb = await sql`
      SELECT 1 FROM pg_database WHERE datname = ${dbName}
    `;

    if (existingDb.length > 0) {
      console.log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö "${dbName}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    } else {
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      console.log(`üìù –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö "${dbName}"...`);
      await sql.unsafe(`CREATE DATABASE "${dbName}"`);
      console.log(`üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö "${dbName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!`);
    }

    await sql.end();
    return true;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    await sql.end();
    return false;
  }
};

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  createDatabase()
    .then((success) => {
      if (success) {
        console.log('–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏: npm run db:migrate');
        process.exit(0);
      } else {
        process.exit(1);
      }
    })
    .catch((error) => {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

export default createDatabase; 