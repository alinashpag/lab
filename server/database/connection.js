import postgres from 'postgres';
import dotenv from 'dotenv';

dotenv.config({ path: 'config.env' });

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
const sql = postgres({
  host: process.env.POSTGRES_HOST || 'localhost',
  port: process.env.POSTGRES_PORT || 5432,
  database: process.env.POSTGRES_DB || 'uxui_lab',
  username: process.env.POSTGRES_USER || 'postgres',
  password: process.env.POSTGRES_PASSWORD || 'password',
  max: 10,
  idle_timeout: 20,
  connect_timeout: 30,
  prepare: true,
  onnotice: process.env.NODE_ENV === 'development' ? console.log : false,
  debug: process.env.NODE_ENV === 'development',
  transform: {
    undefined: null,
  },
  connection: {
    application_name: 'uxui-lab'
  }
});

// –§—É–Ω–∫—Ü–∏—è query –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
export const query = async (text, params = []) => {
  try {
    const result = await sql.unsafe(text, params);
    return { rows: result };
  } catch (error) {
    console.error('Database query error:', error);
    throw error;
  }
};

// –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
export const testConnection = async () => {
  try {
    const result = await sql`SELECT version()`;
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    console.log('–í–µ—Ä—Å–∏—è PostgreSQL:', result[0].version);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:', error.message);
    return false;
  }
};

// Graceful shutdown
export const closeConnection = async () => {
  try {
    await sql.end({ timeout: 5 });
    console.log('üîê –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error.message);
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
process.on('SIGINT', closeConnection);
process.on('SIGTERM', closeConnection);

export default sql; 