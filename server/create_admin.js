#!/usr/bin/env node
import bcrypt from 'bcryptjs';
import sql from './database/connection.js';

const createAdmin = async () => {
  try {
    console.log('üîê –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');

    // –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
    const adminData = {
      username: process.argv[2] || 'admin',
      email: process.argv[3] || 'admin@uxuilab.com',
      password: process.argv[4] || 'admin123',
      firstName: process.argv[5] || '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    };

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(adminData.email)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email');
    }

    // –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    const hashedPassword = await bcrypt.hash(adminData.password, 12);

    // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤–æ–π —Å—Ö–µ–º–æ–π –ë–î
    let admin;
    try {
      admin = await sql`
        INSERT INTO users (username, email, password_hash, first_name, role, email_verified, created_at, updated_at)
        VALUES (${adminData.username}, ${adminData.email}, ${hashedPassword}, ${adminData.firstName}, 'admin', true, NOW(), NOW())
        ON CONFLICT (email) DO UPDATE SET
          first_name = EXCLUDED.first_name,
          role = 'admin',
          password_hash = EXCLUDED.password_hash,
          updated_at = NOW()
        RETURNING id, username, email, first_name, role, created_at
      `;
    } catch (error) {
      // Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º—ã –ë–î
      console.log('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ä–∞—è —Å—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      admin = await sql`
        INSERT INTO users (username, email, password, name, role, email_verified, created_at, updated_at)
        VALUES (${adminData.username}, ${adminData.email}, ${hashedPassword}, ${adminData.firstName}, 'admin', true, NOW(), NOW())
        ON CONFLICT (email) DO UPDATE SET
          name = EXCLUDED.name,
          role = 'admin',
          password = EXCLUDED.password,
          updated_at = NOW()
        RETURNING id, username, email, name, role, created_at
      `;
    }

    console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
    console.log('üìã –î–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:');
    console.log(`   ID: ${admin[0].id}`);
    console.log(`   Username: ${admin[0].username}`);
    console.log(`   Email: ${admin[0].email}`);
    console.log(`   –ò–º—è: ${admin[0].first_name || admin[0].name}`);
    console.log(`   –†–æ–ª—å: ${admin[0].role}`);
    console.log(`   –°–æ–∑–¥–∞–Ω: ${admin[0].created_at}`);
    console.log('');
    console.log('üîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log(`   Email: ${adminData.email}`);
    console.log(`   –ü–∞—Ä–æ–ª—å: ${adminData.password}`);
    console.log('');
    console.log('‚ö†Ô∏è  –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error.message);
    console.log('');
    console.log('üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
    console.log('   node create_admin.js [username] [email] [password] [firstName]');
    console.log('');
    console.log('üìù –ü—Ä–∏–º–µ—Ä—ã:');
    console.log('   node create_admin.js');
    console.log('   node create_admin.js admin admin@company.com mypassword "–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω"');
    console.log('   node create_admin.js superuser super@domain.com securepass123 "–°—É–ø–µ—Ä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"');
  } finally {
    process.exit(0);
  }
};

// –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
createAdmin(); 